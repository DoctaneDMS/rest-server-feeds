<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
 	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd" xmlns:aop="http://www.springframework.org/schema/aop">
    
    <context:annotation-config />

    <import resource="classpath:com/softwareplumbers/feed/service/sql/h2db.xml" />
    <import resource="classpath:com/softwareplumbers/feed/service/sql/oradb.xml" />
    <import resource="classpath:com/softwareplumbers/feed/service/sql/mysqldb.xml" />
    <import resource="classpath:com/softwareplumbers/feed/service/sql/entities.xml" />
  
    <bean id="ResourcePath" class="com.softwareplumbers.common.resourcepath.ResourcePath">
        <property name="locations">
            <array>
                <value>$spring.config.location</value>
                <value>classpath:/config</value>
            </array>
        </property>
    </bean>    
    
    <bean id="K8SEnvironment" class="com.softwareplumbers.common.k8senv.K8SEnvironment">
        <property name="secretsPathParts">
            <array>
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>secrets</value>
            </array>            
        </property> 
    </bean>    

    <!--- configure datasource -->
    <bean id="feed.datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="#{systemEnvironment['DOCTANE_DATABASE_DRIVER']}" />
        <property name="url" value="#{systemEnvironment['DOCTANE_DATABASE_URL']}" />
        <property name="username" value="#{@K8SEnvironment.secrets['SCHEMA_USERNAME']?:systemEnvironment['DOCTANE_DATABASE_USER']}" />
        <property name="password" value="#{@K8SEnvironment.secrets['SCHEMA_PASSWORD']?:systemEnvironment['DOCTANE_DATABASE_PASSWORD']}" />
    </bean>     
            
    <bean id="database" class="com.softwareplumbers.feed.service.sql.MessageDatabase">
        <property name="dataSource" ref="feed.datasource"/>
        <property name="schema" ref="#{systemEnvironment['DOCTANE_DATABASE_VARIANT']}.feed.schema"/>
        <property name="createOption" value="#{systemEnvironment['DOCTANE_DATABASE_CREATE_OPTION']}"/>
        <property name="operations" ref="#{systemEnvironment['DOCTANE_DATABASE_VARIANT']}.feed.operations"/>
        <property name="templates" ref="#{systemEnvironment['DOCTANE_DATABASE_VARIANT']}.feed.templates"/>
    </bean>
                      
    <!--- configure a feed service -->
    <bean id="test" class="com.softwareplumbers.feed.service.sql.SQLFeedService" scope="singleton">
        <constructor-arg index="0" ref="database"/>
        <constructor-arg index="1" value="1000000"/>
        <constructor-arg index="2" value="10000"/>
    </bean>

    <bean id ="keymgr" class="com.softwareplumbers.keymanager.KeyManager" scope="singleton">
        <property name="locationParts">
            <array value-type="java.lang.String">
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>pkix</value>
                <value>doctane.keystore</value>
            </array>
        </property>
        <property name="publishLocationParts">
            <array value-type="java.lang.String">
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>pkix</value>
                <value>certs</value>
            </array>                
        </property>
        <property name="password" value="#{@K8SEnvironment.secrets['DOCTANE_KEYSTORE_PASSWORD']?:systemEnvironment['DOCTANE_KEYSTORE_PASSWORD']}"/>
        <property name="requiredSecretKeys" value="com.softwareplumbers.rest.server.core.SystemSecretKeys"/>
        <property name="requiredKeyPairs" value="com.softwareplumbers.rest.server.core.SystemKeyPairs"/>        
    </bean>
    
    <bean id="dummyValidation" class="com.softwareplumbers.rest.server.core.DummyRequestValidationService" scope="singleton">
        <constructor-arg index="0" value="test"/>
    </bean>
            
    <bean id="auth.dummy" class="com.softwareplumbers.rest.server.model.AuthenticationService" scope="singleton">
        <property name="RequestValidationService" ref="dummyValidation"/>
        <property name="SignonService">
            <bean class="com.softwareplumbers.rest.server.core.DummySignonService">
                <constructor-arg index="0" ref="dummyValidation"/>
            </bean>
        </property>
        <property name="SignedRequestValidationService" ref="signedRequestValidationService"/>
    </bean>
    
    <bean id="signedRequestValidationService" class="com.softwareplumbers.rest.server.model.SignedRequestValidationService" scope="singleton">
                <constructor-arg index="0" ref="keymgr"/>
    </bean>
    
    <bean id="softwarePlumbersSAMLServer" class="com.softwareplumbers.rest.server.model.SAMLProtocolHandlerService" scope="singleton">
        <property name="entityId" value="https://auth.softwareplumbers.com/auth/realms/doctane-test"/>
        <property name="providerMetadata" value="#{@ResourcePath['idp-metadata.xml']}"/>
    </bean>

    <bean id="cookieRequestValidationService" class="com.softwareplumbers.rest.server.core.CookieRequestValidationService">
        <constructor-arg index="0" ref="keymgr"/>
        <constructor-arg index="1" value="test"/>
    </bean>
                
    <bean id="auth.test" class="com.softwareplumbers.rest.server.model.AuthenticationService" scope="singleton">
        <property name="RequestValidationService" ref="cookieRequestValidationService"/>
        <property name="SignedRequestValidationService" ref="signedRequestValidationService"/>
        <property name="SignonService">
            <bean class="com.softwareplumbers.rest.server.core.SAMLSignonService">
                <property name="SAMLProtocolHandlerService" ref="softwarePlumbersSAMLServer"/>
                <property name="assertionConsumerURI" value="http://localhost:8080/auth/test/saml"/>
                <property name="issuerId" value="doctane-api-saml2"/>
            </bean>
        </property>
        <property name="SAMLResponseHandlerService" ref="softwarePlumbersSAMLServer"/>
    </bean>

    <bean id="authz.public" class="com.softwareplumbers.authz.impl.PublicAuthorizationService" scope="singleton"/>

    <bean id="FeedServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <property name="serviceLocatorInterface" value="com.softwareplumbers.feed.rest.server.FeedServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">test</prop>
                <prop key="dummy">test</prop>
            </props>
        </property>
    </bean>
   
    <bean id="AuthenticationServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
    	<property name="serviceLocatorInterface" value="com.softwareplumbers.rest.server.core.AuthenticationServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">auth.test</prop>
                <prop key="dummy">auth.dummy</prop>
            </props>
        </property>
    </bean>
    
    <bean id="AuthorizationServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
    	<property name="serviceLocatorInterface" value="com.softwareplumbers.authz.AuthorizationServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">authz.public</prop>
                <prop key="dummy">authz.public</prop>
            </props>
        </property>
    </bean>
    
    <bean id="testManager" class="com.softwareplumbers.feed.service.sql.SQLFeedServiceMBean">
        <constructor-arg index="0" ref="test" />
    </bean>
    
    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
        <property name="beans">
            <map>
                <entry key="bean:name=feed.service.test" value-ref="testManager"/>
            </map>
        </property>
        <!---
        <property name="server" ref="mbeanServer"/>
        -->
    </bean>
        
</beans>

